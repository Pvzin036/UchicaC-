/*

ListaCont::ListaCont(int tam)
{
    max = tam;
    n = 0;
    vet = new int[max];
}

ListaCont::~ListaCont()
{
    delete [] vet;
}

void ListaCont::aumentaCapacidade()
{
    cout << "Aumentando a capacidade do vetor para " << max*2 << endl;
    int *temp = new int[max*2];
    for(int i = 0; i < n; i++)
        temp[i] = vet[i];
    delete [] vet;
    vet = temp;
    max *= 2;
}

int ListaCont::get(int k)
{
    if(k >= 0 && k < n)
        return vet[k];
    else
    {
        cout << "Indice invalido!" << endl;
        exit(1);
    }
}

void ListaCont::set(int k, int val)
{
    if(k >= 0 && k < n)
        vet[k] = val;
    else
        cout << "Indice invalido!" << endl;
}

void ListaCont::insereFinal(int val)
{
    if(n == max)
    {
        cout << "Vetor cheio" << endl;
        aumentaCapacidade();
    }
    vet[n] = val;
    n++;
}

void ListaCont::insereInicio(int val)
{
    if(n == max)
    {
        cout << "Vetor cheio" << endl;
        aumentaCapacidade();
    }
    for(int i = n; i >= 1; i--)
        vet[i] = vet[i-1];
    for(int i = n-1; i >= 0; i--)
        vet[i+1] = vet[i];
    vet[0] = val;
    n++;
}

void ListaCont::insereK(int k, int val)
{
    if(k >= 0 && k < n)
    {
        if(n == max)
        {
            cout << "Vetor cheio" << endl;
            aumentaCapacidade();
        }
        for(int i = n; i >= k+1; i--)
            vet[i] = vet[i-1];
        vet[k] = val;
        n++;
    }
    else
        cout << "Indice invalido" << endl;
}

void ListaCont::removeFinal()
{
    if(n > 0)
        n--;
    else
        cout << "Lista vazia" << endl;
}

void ListaCont::removeInicio()
{
    if(n > 0)
    {
        for(int i = 0; i < n; i++)
            vet[i] = vet[i+1];
        n--;
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaCont::removeK(int k)
{
    if(n > 0)
    {
        if(k >= 0 && k < n)
        {
            for(int i = k; i < n; i++)
                vet[i] = vet[i+1];
            n--;
        }
        else
            cout << "Indice invalido" << endl;
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaCont::imprime()
{
    cout << "Lista: ";
    for(int i = 0; i < n; i++)
        cout << vet[i] << " ";
    cout << endl;
}
ListaEncad::ListaEncad()
{
    primeiro = NULL;
}

ListaEncad::~ListaEncad()
{
    No *p = primeiro;
    while(p != NULL)
    {
        No *t = p->getProx();
        delete p;
        p = t;
    }
}

void ListaEncad::insereInicio(int val)
{
    No *p = new No();
    p->setInfo(val);
    p->setProx(primeiro);
    primeiro = p;
}

void ListaEncad::removeInicio()
{
    if(primeiro != NULL)
    {
        No *p = primeiro;
        primeiro = p->getProx();
        delete p;
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaEncad::insereFinal(int val)
{
    No *novo = new No();
    novo->setInfo(val);
    novo->setProx(NULL);

    if(primeiro == NULL)
        primeiro = novo;
    else
    {
        No *ultimo = primeiro;
        while(ultimo->getProx() != NULL)
            ultimo = ultimo->getProx();
        ultimo->setProx(novo);
    }
}

void ListaEncad::removeFinal()
{
    if(primeiro != NULL)
    {
        No *ultimo = primeiro;
        No *penultimo = NULL;
        while(ultimo->getProx() != NULL)
        {
            penultimo = ultimo;
            ultimo = ultimo->getProx();
        }
        if(penultimo == NULL)
            primeiro = NULL;
        else
            penultimo->setProx(NULL);
        delete ultimo;
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaEncad::insereK(int k, int val)
{
    if(k == 0)
        insereInicio(val);
    else
    {
        int i = 0;
        No *p = primeiro;
        No *ant = NULL;
        while(p != NULL && i < k)
        {
            ant = p;
            p = p->getProx();
            i++;
        }
        if(p == NULL)
            cout << "Indice invalido" << endl;
        else
        {
            No *novo = new No();
            novo->setInfo(val);
            novo->setProx(p);
            ant->setProx(novo);
        }
    }
}

void ListaEncad::removeK(int k)
{
    if(k == 0)
        removeInicio();
    else
    {
        int i = 0;
        No *p = primeiro;
        No *ant = NULL;
        while(p != NULL && i < k)
        {
            ant = p;
            p = p->getProx();
            i++;
        }
        if(p == NULL)
            cout << "Indice invalido" << endl;
        else
        {
            ant->setProx(p->getProx());
            delete p;
        }
    }
}

bool ListaEncad::busca(int val)
{
    No* p = primeiro;
    while(p != NULL)
    {
        if(p->getInfo() == val)
            return true;
        p = p->getProx();
    }
    return false;
}

void ListaEncad::imprime()
{
    for(No *p = primeiro; p != NULL; p = p->getProx())
    {
        cout << p->getInfo() << " --> ";
    }
    cout << "NULL" << endl;
}

int ListaEncad::numNos()
{
    int cont = 0;
    for(No *p = primeiro; p != NULL; p = p->getProx())
        cont++;
    return cont;
}

ListaEncad::ListaEncad()
{
    n = 0;
    primeiro = NULL;
    ultimo = NULL;
    m = 0;
}

ListaEncad::~ListaEncad()
{
    No *p = primeiro;
    while(p != NULL)
    {
        No *t = p->getProx();
        delete p;
        p = t;
    }
}

void ListaEncad::insereInicio(int val)
{
    No *p = new No();
    p->setInfo(val);
    p->setProx(primeiro);
    if(primeiro == NULL)
    {
        ultimo = p;
        m = val;
    }
    primeiro = p;
    n++;
    if(val > m)
        m = val;
}

void ListaEncad::removeInicio()
{
    if(primeiro != NULL)
    {
        No *p = primeiro;
        primeiro = p->getProx();
        int val = p->getInfo();
        delete p;
        if(primeiro == NULL)
            ultimo = NULL;
        n--;
        if(val == m)
            m = auxMaior();
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaEncad::insereFinal(int val)
{
    No *p = new No();
    p->setInfo(val);
    p->setProx(NULL);
    if(primeiro == NULL)
    {
        primeiro = p;
        m = val;
    }
    else
        ultimo->setProx(p);
    ultimo = p;
    n++;
    if(val > m)
        m = val;
}

void ListaEncad::removeFinal()
{
    int val;
    if(primeiro != NULL)
    {
        if(primeiro == ultimo)
        {
            val = ultimo->getInfo();
            delete ultimo;
            primeiro = ultimo = NULL;
        }
        else
        {
            No *penultimo = primeiro;
            while(penultimo->getProx() != ultimo)
                penultimo = penultimo->getProx();
            penultimo->setProx(NULL);
            val = ultimo->getInfo();
            delete ultimo;
            ultimo = penultimo;
        }
        n--;
        if(val == m)
            m = auxMaior();
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaEncad::insereK(int k, int val)
{
    if(k == 0)
        insereInicio(val);
    else
    {
        int i = 0;
        No *p = primeiro;
        No *ant = NULL;
        while(p != NULL && i < k)
        {
            ant = p;
            p = p->getProx();
            i++;
        }
        if(p == NULL)
            cout << "Indice invalido" << endl;
        else
        {
            No *novo = new No();
            novo->setInfo(val);
            novo->setProx(p);
            ant->setProx(novo);
            n++;
            if(val > m)
                m = val;
        }
    }
}

void ListaEncad::removeK(int k)
{
    if(k == 0)
        removeInicio();
    else
    {
        int i = 0;
        No *p = primeiro;
        No *ant = NULL;
        while(p != NULL && i < k)
        {
            ant = p;
            p = p->getProx();
            i++;
        }
        if(p == NULL)
            cout << "Indice invalido" << endl;
        else
        {
            ant->setProx(p->getProx());
            if(p == ultimo)
                ultimo = ant;
            int val = p->getInfo();
            delete p;
            n--;
            if(val == m)
                m = auxMaior();
        }
    }
}

void ListaEncad::insereApos(int x, int val)
{
    No *p = primeiro;
    while(p != NULL)
    {
        if(p->getInfo() == x)
            break;
        p = p->getProx();
    }
    if(p == NULL)
        cout << "No " << x << "nao existente" << endl;
    else
    {
        No *novo = new No();
        novo->setInfo(val);
        novo->setProx(p->getProx());
        p->setProx(novo);
        if(ultimo == p)
            ultimo = novo;
        n++;
        if(val > m)
            m = val;
    }
}

bool ListaEncad::busca(int val)
{
    No* p = primeiro;
    while(p != NULL)
    {
        if(p->getInfo() == val)
            return true;
        p = p->getProx();
    }
    return false;
}

void ListaEncad::imprime()
{
    for(No *p = primeiro; p != NULL; p = p->getProx())
        cout << p->getInfo() << " --> ";
    cout << "NULL -- ";
    cout << "Nos: " << numNos() << " -- ";
    cout << "Maior: " << maior() << endl;
}

int ListaEncad::numNos()
{
    return n;
}

int ListaEncad::auxMaior()
{
    No *m = primeiro;
    for(No *p = primeiro; p != NULL; p = p->getProx())
        if(p->getInfo() > m->getInfo())
            m = p;
    return m->getInfo();
}

int ListaEncad::maior()
{
    if(primeiro == NULL)
    {
        cout << "Lista vazia" << endl;
        exit(1);
    }
    
    
    //No *m = primeiro;
    //for(No *p = primeiro; p != NULL; p = p->getProx())
        //if(p->getInfo() > m->getInfo())
         //   m = p;
   // return m->getInfo();
    
    
    
    return m;
}

ListaEncad* ListaEncad::partir(int val)
{
    ListaEncad *nova = new ListaEncad;

    No *p = primeiro;
    No *ant = NULL;
    int cont = 0;

    while(p != NULL)
    {
        if(p->getInfo() == val)
            break;
        ant = p;
        p = p->getProx();
        cont++;
    }
    if(p == NULL)
        cout << "No inexistente" << endl;
    else
    {
        if(ant == NULL)
        {
            nova->primeiro = primeiro;
            nova->ultimo = ultimo;
            nova->n = n;
            nova->m = m;

            primeiro = ultimo = NULL;
            n = m = 0;
        }
        else
        {
            nova->primeiro = p;
            nova->ultimo = ultimo;
            nova->n = n-cont;

            ant->setProx(NULL);
            ultimo = ant;
            n = cont;

            nova->m = nova->auxMaior();
            m = auxMaior();
        }
    }
    return nova;
}

ListaDupla::ListaDupla()
{
    primeiro = ultimo = NULL;
    n = 0;
}

ListaDupla::~ListaDupla()
{
    NoDuplo *p = ultimo;
    while(p != NULL)
    {
        NoDuplo *t = p->getAnt();
        delete p;
        p = t;
    }
}

void ListaDupla::insereInicio(int val)
{
    NoDuplo *p = new NoDuplo();
    p->setInfo(val);
    p->setProx(primeiro);
    p->setAnt(NULL);
    if(primeiro == NULL)
        ultimo = p;
    else
        primeiro->setAnt(p);
    primeiro = p;
    n++;
}

void ListaDupla::removeInicio()
{
    if(primeiro != NULL)
    {
        NoDuplo *p = primeiro;
        primeiro = p->getProx();
        delete p;
        if(primeiro == NULL)
            ultimo = NULL;
        else
            primeiro->setAnt(NULL);
        n--;
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaDupla::insereFinal(int val)
{
    NoDuplo *p = new NoDuplo();
    p->setInfo(val);
    p->setAnt(ultimo);
    p->setProx(NULL);
    if(ultimo == NULL)
        primeiro = p;
    else
        ultimo->setProx(p);
    ultimo = p;
    n++;
}

void ListaDupla::removeFinal()
{
    if(ultimo != NULL)
    {
        NoDuplo *p = ultimo;
        ultimo = p->getAnt();
        delete p;
        if(ultimo == NULL)
            primeiro = NULL;
        else
            ultimo->setProx(NULL);
        n--;
    }
    else
        cout << "Lista vazia" << endl;
}

void ListaDupla::removeVal(int val)
{
    NoDuplo *p = primeiro;
    while(p != NULL)
    {
        if(p->getInfo() == val)
            break;
        p = p->getProx();
    }
    if(p == NULL)
        cout << "No " << val << " inexistente" << endl;
    else
    {
        NoDuplo *ant = p->getAnt();
        NoDuplo *prox = p->getProx();
        if(ant == NULL)
            primeiro = prox;
        else
            ant->setProx(prox);
        if(prox == NULL)
            ultimo = ant;
        else
            prox->setAnt(ant);
        delete p;
        n--;
    }
}

void ListaDupla::imprime()
{
    cout << "Lista: ";
    for(NoDuplo *p = primeiro; p != NULL; p = p->getProx())
        cout << p->getInfo() << " ";
    cout << endl;
    imprimeRec();
}

void ListaDupla::imprimeReverso()
{
    cout << "Lista Reversa: ";
    for(NoDuplo *p = ultimo; p != NULL; p = p->getAnt())
        cout << p->getInfo() << " ";
    cout << endl;
    imprimeReversoRec();
}

void ListaDupla::imprimeRec()
{
    cout << "Lista: ";
    auxImprimeRec(primeiro);
    cout << endl;
}
void ListaDupla::auxImprimeRec(NoDuplo *p)
{
    if(p != NULL)
    {
        cout << p->getInfo() << " ";
        auxImprimeRec(p->getProx());
    }
}

void ListaDupla::imprimeReversoRec()
{
    cout << "Lista Reversa: ";
    auxImprimeReversoRec(ultimo);
    cout << endl;
}
void ListaDupla::auxImprimeReversoRec(NoDuplo *p)
{
    if(p != NULL)
    {
        cout << p->getInfo() << " ";
        auxImprimeReversoRec(p->getAnt());
    }
}

ListaOrdEncad::ListaOrdEncad()
{
    primeiro = NULL;
}

ListaOrdEncad::~ListaOrdEncad()
{
    No *p = primeiro;
    while(p != NULL)
    {
        No *t = p->getProx();
        delete p;
        p = t;
    }
}

void ListaOrdEncad::insere(int val)
{
    No *p = primeiro;
    No *ant = NULL;
    while(p != NULL)
    {
        if(p->getInfo() > val)
            break;
        ant = p;
        p = p->getProx();
    }
    No *novo = new No();
    novo->setInfo(val);
    novo->setProx(p);
    if(ant == NULL)
        primeiro = novo;
    else
        ant->setProx(novo);
}

void ListaOrdEncad::remove(int val)
{
    if(primeiro != NULL)
    {
        No *p = primeiro;
        No *ant = NULL;
        while(p != NULL)
        {
            if(p->getInfo() == val)
                break;
            ant = p;
            p = p->getProx();
        }
        if(p == NULL)
            cout << "Valor inexistente" << endl;
        else
        {
            if(ant == NULL)
                primeiro = p->getProx();
            else
                ant->setProx(p->getProx());
            delete p;
        }
    }
    else
        cout << "Lista vazia" << endl;
}

bool ListaOrdEncad::busca(int val)
{
    for(No *p = primeiro; p != NULL; p = p->getProx())
    {
        if(p->getInfo() == val)
            return true;
        if(p->getInfo() > val)
            return false;
    }
    return false;
}

void ListaOrdEncad::imprime()
{
    cout << "Lista: ";
    for(No *p = primeiro; p != NULL; p = p->getProx())
        cout << p->getInfo() << " ";
    cout << endl;
}

ListaOrdCont::ListaOrdCont(int tam)
{
    max = tam;
    n = 0;
    vet = new int[tam];
}

ListaOrdCont::~ListaOrdCont()
{
    delete [] vet;
}

int ListaOrdCont::get(int k)
{
    if(k >= 0 && k < n)
        return vet[k];
    cout << "Indice invalido" << endl;
    exit(1);
}

void ListaOrdCont::insere(int val)
{
    if(n == max)
    {
        cout << "Vetor Cheio!" << endl;
        exit(3);
    }
    int i;
    for(i = n; i > 0 && vet[i-1] >= val; i--)
        vet[i] = vet[i-1];
    vet[i] = val;
    n++;
}

void ListaOrdCont::remove(int val)
{
    int k = buscaBinaria(val);
    if(k != -1)
    {
        for(int i = k; i < n-1; i++) // 
            vet[i] = vet[i+1];
        n--;
    }
    else
        cout << "Valor inexistente" << endl;
}

void ListaOrdCont::imprime()
{
    cout << "Lista: ";
    for(int i = 0; i < n; i++)
        cout << vet[i] << " ";
    cout << endl;
}

bool ListaOrdCont::busca(int val)
{
    int k = buscaBinaria(val);
    return k >= 0 && k < n;
}

int ListaOrdCont::buscaBinaria(int val)
{
    int esq = 0;
    int dir = n-1;
    while(esq <= dir)
    {
        int meio = (esq + dir) / 2;
        if(val > vet[meio])
            esq = meio + 1;
        else if (val < vet[meio])
            dir = meio - 1;
        else
            return meio;
    }
    return -1;
}

FilaCirc::FilaCirc(int tam)
{
    max = tam;
    inicio = fim = n = 0;
    vet = new int[max];
}

FilaCirc::~FilaCirc()
{
    delete [] vet;
}

int FilaCirc::inc(int ind)
{
    return (ind+1) % max;
}

int FilaCirc::getInicio()
{
    if(!vazia())
        return vet[inicio];
    else
    {
        cout << "Fila vazia" << endl;
        exit(1);
    }
}

void FilaCirc::enfileira(int val)
{
    if(n == max)
        cout << "Vetor cheio" << endl;
    else
    {
        vet[fim] = val;
        fim = inc(fim);
        n++;
    }
}

int FilaCirc::desenfileira()
{
    if(!vazia())
    {
        int val = vet[inicio];
        inicio = inc(inicio);
        n--;
        return val;
    }
    cout << "Lista vazia" << endl;
    exit(1);
}

bool FilaCirc::vazia()
{
    return n == 0;
}

FilaCont::FilaCont(int tam)
{
    max = tam;
    inicio = fim = 0;
    vet = new int[max];
}

FilaCont::~FilaCont()
{
    delete [] vet;
}

int FilaCont::getInicio()
{
    if(inicio < fim)
        return vet[inicio];
    else
    {
        cout << "Fila vazia" << endl;
        exit(1);
    }
}

void FilaCont::enfileira(int val)
{
    if(fim == max)
        cout << "Vetor cheio" << endl;
    else
        vet[fim++] = val;
}

int FilaCont::desenfileira()
{
    if(inicio != fim)
    {
        inicio++;
        return vet[inicio-1];
    }
    cout << "Lista vazia" << endl;
    exit(1);
}

bool FilaCont::vazia()
{
    return inicio == fim;
}
FilaEncad::FilaEncad()
{
    inicio = fim = NULL;
}

FilaEncad::~FilaEncad()
{
    No *p = inicio;
    while(p != NULL)
    {
        No *t = p->getProx();
        delete p;
        p = t;
    }
}

int FilaEncad::getInicio()
{
    if(inicio != NULL)
        return inicio->getInfo();
    cout << "Fila vazia" << endl;
    exit(1);
}


int FilaEncad::desenfileira()
{
    if(inicio != NULL)
    {
        No *p = inicio;
        inicio = p->getProx();
        int val = p->getInfo();
        delete p;
        if(inicio == NULL)
            fim = NULL;
        return val;
    }
    cout << "Fila vazia" << endl;
    exit(1);
}

void FilaEncad::enfileira(int val)
{
    No *p = new No();
    p->setInfo(val);
    p->setProx(NULL);
    if(inicio == NULL)
        inicio = p;
    else
        fim->setProx(p);
    fim = p;
}

bool FilaEncad::vazia()
{
    return inicio == NULL;
}


PilhaCont::PilhaCont(int tam)
{
    max = tam;
    topo = -1;
    vet = new int[max];
}

PilhaCont::~PilhaCont()
{
    delete [] vet;
}

int PilhaCont::getTopo()
{
    if(topo != -1)
        return vet[topo];
    else
    {
        cout << "Pilha vazia!" << endl;
        exit(1);
    }
}

void PilhaCont::empilha(int val)
{
    if(topo == max-1)
        cout << "Vetor cheio" << endl;
    else
        vet[++topo] = val;
}

int PilhaCont::desempilha()
{
    if(topo == -1)
        cout << "Pilha vazia" << endl;
    else
        topo--;
    return vet[topo+1];
}

bool PilhaCont::vazia()
{
    return topo == -1;
}

void PilhaCont::imprime()
{
    cout << "Pilha: ";
    for(int i = topo; i >= 0; i--)
        cout << vet[i] << " ";
    cout << endl;
}

PilhaEncad::PilhaEncad()
{
    topo = NULL;
}

PilhaEncad::~PilhaEncad()
{
    No *p = topo;
    while(p != NULL)
    {
        No *t = p->getProx();
        delete p;
        p = t;
    }
}

int PilhaEncad::getTopo()
{
    if(topo != NULL)
        return topo->getInfo();
    cout << "Pilha vazia" << endl;
    exit(1);
}

void PilhaEncad::empilha(int val)
{
    No *p = new No();
    p->setInfo(val);
    p->setProx(topo);
    topo = p;
}

int PilhaEncad::desempilha()
{
    if(topo != NULL)
    {
        No *p = topo;
        topo = p->getProx();
        int val = p->getInfo();
        delete p;
        return val;
    }
    cout << "Pilha vazia" << endl;
    exit(1);
}

bool PilhaEncad::vazia()
{
    return topo == NULL;
}

void PilhaEncad::imprime()
{
    cout << "Pilha:" << endl;
    for(No *p = topo; p != NULL; p = p->getProx())
        cout << p->getInfo() << endl;
    cout << endl;
}

FilaEncad::FilaEncad()
{
    inicio = fim = NULL;
}

FilaEncad::~FilaEncad()
{
    No *p = inicio;
    while(p != NULL)
    {
        No *t = p->getProx();
        delete p;
        p = t;
    }
}

int FilaEncad::getInicio()
{
    if(inicio != NULL)
        return inicio->getInfo();
    cout << "Fila vazia" << endl;
    exit(1);
}


int FilaEncad::desenfileira()
{
    if(inicio != NULL)
    {
        No *p = inicio;
        inicio = p->getProx();
        int val = p->getInfo();
        delete p;
        if(inicio == NULL)
            fim = NULL;
        return val;
    }
    cout << "Fila vazia" << endl;
    exit(1);
}

void FilaEncad::enfileira(int val)
{
    No *p = new No();
    p->setInfo(val);
    p->setProx(NULL);
    if(inicio == NULL)
        inicio = p;
    else
        fim->setProx(p);
    fim = p;
}

bool FilaEncad::vazia()
{
    return inicio == NULL;
}

void FilaEncad::imprime()
{
    cout << "Fila:  ";
    for(No *p = inicio; p != NULL; p = p->getProx())
        cout << p->getInfo() << " ";
    cout << endl;
}

*/
